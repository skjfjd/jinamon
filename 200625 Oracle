/*  table
    무결성 : column에 적용
            column을 지정하는 성질, 설정

    Primary Key : 기본키 , NULL 을 허용하지 않는다 , 중복을 허용하지 않는다, ID , 주민등록번호
    Unique Key : 고유키 , NULL을 허용한다 , 중복을 허용하지 않는다 , Email
    foreign Key : 외래키 , 테이블과 테이블을 연결하는 목적의 성질이다.
                 Join의 목적이다
                 null을 허용
                 외래키로 설정된 컬럼은 연결된 테이블에서 PK 나 UK 로 설정 되어 있어야 한다
    check : 범위를 설정 , null을 허용 
    not null :  null을 허용하지 않는다 
*/

-- NOT NULL
CREATE TABLE TB_TEST(
    COL_01 VARCHAR2(10) NOT NULL ,
    COL_02 VARCHAR2(20) 
);
INSERT INTO tb_test(col_01, col_02)
VALUES('AAA' , '111');


SELECT
    *
FROM TB_TEST;

INSERT INTO tb_test(col_01 )
VALUES('CCC');


INSERT INTO tb_test(col_01, col_02)
VALUES('BBB' , '111');





-- Primary Key = Unique + not null
-- 식별자  , 한 테이블에서 최대 32개 컬럼까지 지정할 수 있다.
-- CONSTRAINT : 무결성

CREATE TABLE TEST_01(
    PKCOL VARCHAR2 (10) CONSTRAINT PK_TEST_01 PRIMARY KEY, -- PK_TEST_01 < id
    COL1 VARCHAR(20),
    COL2 VARCHAR(30)
);

INSERT INTO TEST_01 (PKCOL , COL1, COL2)
VALUES ('AAA' , 'aaa' ,'111');

INSERT INTO TEST_01 (PKCOL , COL1, COL2)
VALUES ('BBB' , 'aaa' ,'111');

SELECT
    *
FROM TEST_01;

INSERT INTO TEST_01(PKCOL)
VALUES('CCC');

INSERT INTO TEST_01 (PKCOL , COL1, COL2)   -- CCC 가 중복 되어 오류
VALUES ('CCC' , 'aaa' ,'111');

INSERT INTO TEST_01 (PKCOL , COL1, COL2)  --PK가 NULL 허용 안함
VALUES ('' , 'bbb' ,'111');


DROP TABLE TEST_01
CASCADE CONSTRAINTS;

--Primary Key 설정이 안됨
CREATE TABLE TEST_01(
    PKCOL VARCHAR2 (10) CONSTRAINT PK_TEST_01 PRIMARY KEY, -- PK_TEST_01 < id
    COL1 VARCHAR(20)  CONSTRAINT PK_TEST_02 PRIMARY KEY,
    COL2 VARCHAR(30)
);   -- PK 가 2개 이상 안됨

-- 다음과 같이 한다
CREATE TABLE TEST_01(
    PKCOL VARCHAR2 (10),
    COL1 VARCHAR(20)  ,
    COL2 VARCHAR(30),
    CONSTRAINT pk_test_01 primary key (pkcol, col1)
);           --무결성으로  PK 2개이상 만들기


CREATE TABLE TEST_01(
    PKCOL VARCHAR2 (10),
    COL1 VARCHAR(20),
    COL2 VARCHAR(30)
);
INSERT INTO TEST_01 (PKCOL , COL1, COL2)
VALUES ('aaa' , 'bbb' ,'111');

alter table TEST_01
add CONSTRAINT pk_test_01
primary key(pkcol , col1);

alter table TEST_01
drop CONSTRAINT pk_test_01;


--Unique : 고유한 값 , 중복된 값을 허용 안함 , null 허용 가능

create table test_02(
    ukcol varchar2(10) constraint uk_test_02 unique,
    col_01 varchar2(20),
    col_02 varchar2(20)
);

insert into test_02(ukcol, col_01 , col_02)
values('AAA' , 'aaa' , '111');

insert into test_02(ukcol, col_01 , col_02)
values('' , 'aaa' , '111');

insert into test_02(ukcol, col_01 , col_02)
values('' , 'aaa' , '111');


SELECT
    *
FROM test_02;

alter table test_02
drop CONSTRAINT uk_test_02;

drop table test_02
CASCADE CONSTRAINTS;


-- foreign key : 외래키
-- 테이블과 테이블을 연결학 ㅣ위한 무결성  제약조건이다
-- 다른 테이블(부모)에서는 PK , UK로 컬럼이 설정 되어 있어야 한다
-- null 허용 

drop table TB_PARENT
cascade constraints;

CREATE TABLE TB_PARENT(
    PKCOL01 VARCHAR(10),
    COL_01 VARCHAR2(20),
    COL_02 VARCHAR2(30),
    
   CONSTRAINT PK_TB_PARENT PRIMARY KEY(PKCOL01)
);
SELECT
    *
FROM TB_PARent;
CREATE TABLE TB_CHILD(
    KEY_01 VARCHAR2(10),
    KEY_02 VARCHAR2(10),
    FKCOL01 VARCHAR2(10),
    CONSTRAINT FK_TB_CHILD FOREIGN KEY(FKCOL01)
    REFERENCES TB_PARENT(PKCOL01)
    
);

INSERT INTO TB_PARENT(PKCOL01,col_01,col_02)
VALUES('AAA' , 'aaa' , '가가가');

INSERT INTO TB_PARENT(PKCOL01,col_01,col_02)
VALUES('BBB' , 'bbb' , '나나나');


INSERT INTO TB_PARENT(PKCOL01,col_01,col_02)
VALUES('CCC' , 'ccc' , '다다다');

INSERT INTO TB_CHILD(KEY_01 , KEY_02 , FKCOL01)
VALUES('123' , '가나다' , 'BBB');

INSERT INTO TB_CHILD(KEY_01 , KEY_02 , FKCOL01)
VALUES('234' , '나다라' , '');

SELECT
    *
FROM TB_CHILD;



-- CHECK : 지정된 값만 입력할 수 있고 NULL을  허용 ,중복 허용
CREATE TABLE TB_CHECK(
    COL_01 VARCHAR2(10),
    KEY_01 VARCHAR2(10),
    CONSTRAINT CHK_TB_CHECK01 CHECK( COL_01 IN('사과' , '배' , '바나나') ),
    CONSTRAINT CHK_TB_CHECK02 CHECK( KEY_01 >0 AND KEY_01 <=100)
);

INSERT INTO TB_CHECK(COL_01 , KEY_01)
VALUES ('사과' , 50);


INSERT INTO TB_CHECK(COL_01 , KEY_01)
VALUES ('사과' , 0);


INSERT INTO TB_CHECK(COL_01 , KEY_01)
VALUES ('사과' , 10);


INSERT INTO TB_CHECK(COL_01 , KEY_01)
VALUES ('' , 25);


INSERT INTO TB_CHECK(COL_01 , KEY_01)
VALUES ('' , '');

SELECT
    *
FROM TB_CHECK;

//
/*
    sequence : 유일한 값을 생성해 주는 Oracle Object
                baseball  +1    1001 > 1002 > 1003
                회원번호 , 게시판 관리번호
                초기화가 불가능 , 삭제 후 다시 생성
                
    int count =1;
    count++;
 */
 --sequence 생성
CREATE SEQUENCE TEST_SEQ 
 INCREMENT by 1 -- 1씩 증가 ++
START WITH 10    --시작 숫자 
 MAXVALUE 100
 MINVALUE 1;
 
 
 --CURRVAL -- 현재의 SEO 값
 
 SELECT TEST_SEQ.CURRVAL
 FROM DUAL;
 
 --NEXTVAL -- 진행값
 
 SELECT TEST_SEQ.NEXTVAL
 FROM DUAL;
 
 --SEQUENCE 수정
 ALTER SEQUENCE TEST_SEQ
 INCREMENT BY 3;
 
 
 SELECT
     *
 FROM EMPLOYEES;
 
 --초기화 불가
 
 DROP SEQUENCE TEST_SEQ;
 
 
 INSERT INTO EMPLOYEES(EMPLOYEE_ID , LAST_NAME , EMAIL ,HIRE_DATE ,JOB_ID)
 VALUES(EMPLOYEES_SEQ.nextval,'송' , 'GGYO.NAVER.COM' , '92/07/29' , 'IT_PROG');
 
 
 --동의어
 
 /*
  int[] array;
  int[] alias = array;
  */
  
CREATE SYNONYM "사원들"
FOR EMPLOYEES;

INSERT INTO "사원들"(EMPLOYEE_ID , LAST_NAME ,EMAIL , HIRE_DATE , JOB_ID)
VALUES(EMPLOYEES_SEQ.nextval,'진' , 'NOW.NAVER.COM' , SYSDATE , 'IT_PROG');

SELECT *FROM EMPLOYEES;  
 
 //
 /*
        index : 색인
        원하는 정보의 위치를 빠르고 정확하게 알아낼 수 있는 방법
        자동생성 : Primary Key , Uniqeu Key
        수동생성 : Query
        
        생성했을 때 효율적인 경우 
        1. where 절이나 join조건 안에 자주 사용되는 컬럼
        2. null 값이 많이 포함되어 있는 컬럼
        3. where 절이나 join 조건 안에 두 개이상을 사용하는 컬럼
        
        
        생성했을 때 비효율적인 경우
        1. 테이블의 Data의 수(row)가 적을때(3000개 이하)
        2. 테이블이 자주 갱신되는 경우
*/

CREATE TABLE EMP_COPY
AS
SELECT
    *
FROM EMPLOYEES;

-- 자동 생성

ALTER TABLE EMP_COPY
ADD
CONSTRAINT PK_EMPCOPY_01 PRIMARY KEY(EMPLOYEE_ID);

--INDEX 확인

SELECT
    *
FROM ALL_INDEXES
WHERE TABLE_NAME IN('EMP_COPY');


--강제 생성
CREATE INDEX EMP_INDEX01
ON EMP_COPY(MANAGER_ID);







 
 
 
 
